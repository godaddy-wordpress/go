version: 2.1


orbs:
  browser-tools: circleci/browser-tools@1.1

executors:
  php_56:
    docker:
      - image: cimg/php:5.6
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWOR
  php_74:
    docker:
      - image: cimg/php:7.4
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  php_80:
    docker:
      - image: cimg/php:8.0
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  php_74_browsers:
     docker:
      - image: cimg/php:7.4-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  php_74_apache_node_browsers_mysql:
    docker:
      - image: circleci/php:7.4-apache-node-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          XDEBUG_MODE=coverage
      - image: cimg/mysql:5.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  python_310_browsers:
    docker:
      - image: cimg/python:3.10-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  go_1_17_browsers:
    docker:
      - image: cimg/go:1.17-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

workflows:
  version: 2.1
  main:
    jobs:
      - build:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots

      - pr_artifact_comment:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master

      # Unit Tests
      - unit-tests:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
          requires:
            - build

      # Theme Check
      - theme-check:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
          requires:
            - build

      # Cypress Tests
      - customizer-e2e:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
          requires:
            - build

      # Accessibility Tests
      - a11y-tests:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
          requires:
            - build

      # PHPCS
      - php56-phpcs: # EOL December 31, 2018, latest PHP version supported by Go
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
      - php74-phpcs:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
      - php80-phpcs:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots

      # Translations
      - i18n:
          filters:
            branches:
              only: master


      # Visual Regression Tests
      - visual-regression-chrome:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
          requires:
            - build
      - visual-regression-firefox:
          filters:
            tags:
              only: /^(?!canary).*$/
            branches:
              ignore:
                - actions/visual-regression-update-snapshots
          requires:
            - build

      - visual-regression-update-snapshots-chrome:
          filters:
            branches:
              only: actions/visual-regression-update-snapshots
      - visual-regression-update-snapshots-firefox:
          filters:
            branches:
              only: actions/visual-regression-update-snapshots

      - canary:
          requires:
            - php56-phpcs
            - php74-phpcs
            - unit-tests
            - theme-check
            - a11y-tests
            - build
          filters:
            branches:
              only: master

      - deploy:
          requires:
            - php56-phpcs
            - php74-phpcs
            - unit-tests
            - theme-check
            # - a11y-tests
            - build
          filters:
            tags:
              only: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*)?(\+[0-9-]+(\.[0-9]+)*)?/ # Run on semantic version tags only
            branches:
              ignore: /.*/

commands:
  wait_for_mysql:
    steps:
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1

  install_composer_dependencies:
    steps:
      - run:
          name: "Install Composer Dependencies"
          command: |
            sudo chmod -R 777 ../../
            mkdir -p ../../plugins/coblocks
            if [ "$CIRCLE_JOB" == "php56-phpcs" ]; then
              rm vendor/composer/installed.json
              composer require oomphinc/composer-installers-extender ^1.1
            fi
            composer install

  install_yarn_dependencies:
    steps:
      - restore_cache:
          key: yarn-deps-{{ .Environment.CACHE_VERSION }}
      - run:
          name: Install Yarn Dependencies
          command: yarn install
      - save_cache:
          key: yarn-deps-{{ .Environment.CACHE_VERSION }}
          paths:
            - ~/project/node_modules
            - ~/.cache

  install_code_climate_test_reporter:
    steps:
      - run:
          name: Install Code Climate test reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build

  install_wpcli:
    steps:
      - run:
          name: Install WPCLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp

  install_rsync:
    steps:
      - run:
          name: Install rsync
          command: |
            sudo apt-get update --allow-releaseinfo-change
            sudo apt install rsync

  run_phpunit_single_site_generate_coverage:
    steps:
      - run:
          name: "Run PHPUnit - Single Site - Generate Coverage Reports"
          command: composer run test -- --coverage-html=/tmp/artifacts/code-coverage/phpunit/html --log-junit=/tmp/artifacts/code-coverage/phpunit/results.xml --coverage-clover=clover.xml
          working_directory: /var/www/html/wordpress/wp-content/themes/go

  run_php_cs:
    steps:
      - checkout
      - run:
          name: "Setup Environment Variables"
          command: |
            echo "export PATH=$HOME/.composer/vendor/bin:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - restore_composer_cache
      - install_composer_dependencies
      - save_composer_cache
      - restore_cache:
          key: go-{{ .Environment.CACHE_VERSION }}
      - run:
          name: "Run PHPCS"
          command: composer lint
      - save_cache:
          key: go-{{ .Environment.CACHE_VERSION }}
          paths:
            - /tmp/phpcs-go-cache

  setup_spec_files_diff_tree:
    steps:
      - run:
          name: Setup spec files to run based on git diff-tree
          command: bash .dev/bin/setup-test-specs.sh

  set_proper_node_version:
    steps:
      - run:
          name: Swap node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 14.18.1
            nvm alias default 14.18.1
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

  run_php_unit_test:
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - wait_for_mysql
      - run:
          name: Update hosts
          command: echo 127.0.0.1 go.test | sudo tee -a /etc/hosts
      - run:
          name: Install MariaDB
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get install mariadb-client
      - install_wpcli
      - run:
          name: Setup WordPress site
          command: bash .dev/deploy-scripts/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
      - restore_composer_cache
      - run:
          name: Install Composer packages
          command: composer install
          working_directory: /var/www/html/wordpress/wp-content/themes/go
      - save_composer_cache
      - install_code_climate_test_reporter
      - run_phpunit_single_site_generate_coverage
      - run:
          name: "Deploy Coverage to Code Climate"
          command: |
            cp /var/www/html/wordpress/wp-content/themes/go/clover.xml ~/project/
            ./cc-test-reporter after-build -t clover --exit-code $?
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/

  run_visual_regression_tests:
    parameters:
      browser:
        type: enum
        enum: ['chrome', 'firefox']
    steps:
      - run:
          name: Update hosts
          command: echo 127.0.0.1 go.test | sudo tee -a /etc/hosts
      - checkout
      - attach_workspace:
          at: ~/project
      - setup_spec_files_diff_tree
      - run:
          name: "Install awscli"
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: "Download base snapshots"
          command: yarn snapshots:download
      - wait_for_mysql
      - run:
          name: Install MariaDB
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get install mariadb-client
      - install_wpcli
      - run:
          name: Setup WordPress site
          command: bash .dev/deploy-scripts/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
      - restore_composer_cache
      - run:
          name: Install Composer packages
          command: composer install
          working_directory: /var/www/html/wordpress/wp-content/themes/go
      - save_composer_cache
      - add_ssh_keys:
          fingerprints:
            - "7e:67:b2:b7:ac:45:85:15:5d:e2:16:11:f5:00:8f:2b"
      - install_yarn_dependencies
      - run:
          name: Install WPNUX Template Switcher
          command: |
            cd /var/www/html/wordpress/wp-content/plugins
            git clone git@github.com:godaddy-wordpress/wpnux-template-switcher.git wpnux-template-loader
            wp plugin activate wpnux-template-loader
      - add_ssh_keys:
          fingerprints:
            - "3c:e9:ef:51:a5:2f:f4:b6:cd:ee:ba:88:33:a2:83:00"
      - run:
          name:  Install WPCLI NUX Importer
          command: |
            mkdir -p ~/.wp-cli/packages/local
            cd ~/.wp-cli/packages/local
            git clone git@github.com:godaddy-wordpress/wp-cli-nux-command.git
            cp wp-cli-nux-command/bin/config.yml ~/.wp-cli/config.yml
      - run:
          name:  Flush permalinks and generate .htaccess file
          command: wp rewrite flush --hard --path=/var/www/html/wordpress
      - run:
          name: Fix permissions on uploads directory for WPNUX importer
          command: sudo chown -R www-data:www-data /var/www/html/wordpress/wp-content/uploads
      - run:
          name: Activate CoBlocks and WooCommerce
          command: |
            wp plugin activate coblocks --path=/var/www/html/wordpress
            wp plugin activate woocommerce --path=/var/www/html/wordpress
      - run:
          name: "Run end to end tests (Cypress.io) - << parameters.browser >>"
          command: ./node_modules/.bin/cypress run --browser << parameters.browser >> --parallel --record --group vr-<< parameters.browser >> --spec "$(cat /tmp/specstring | xargs | sed -e 's/ /,/g')"

  visual-regression-update-snapshots:
    parameters:
      browser:
        type: enum
        enum: ['chrome', 'firefox']
    steps:
      - checkout
      - set_proper_node_version
      - install_yarn_dependencies
      - run:
          name: "Install awscli"
          command: |
            udo apt-get update
            sudo apt-get install awscli
      - run:
          name: "Run end to end tests (Cypress.io)"
          command: |
            .dev/bin/generate-go-screenshot-specs.sh && MOZ_HEADLESS_WIDTH=1280 MOZ_HEADLESS_HEIGHT=720 ./node_modules/.bin/cypress run --browser << parameters.browser >> --parallel --group vr-<< parameters.browser >> --record --spec '.dev/tests/cypress/integration/visual-regression/*.spec.js'
      - run:
          name: "Update base snapshots - << parameters.browser >>"
          command: |
            if [ ! -d .dev/tests/cypress/snapshots/visual-regression ] || [ -z "$(ls -A .dev/tests/cypress/snapshots/visual-regression)"]; then
              echo "No snapshots to upload."
              circleci-agent step halt
              exit
            fi
            yarn snapshots:upload-all

  # Disable the xdebug PHP extension.
  disable_xdebug_php_extension:
    steps:
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini

  # Save composer cache
  save_composer_cache:
    steps:
      - save_cache:
          key: composer-deps-{{ .Environment.CACHE_VERSION }}
          paths:
            - ~/project/vendor

  # Restore composer cache
  restore_composer_cache:
    steps:
      - restore_cache:
          key: composer-deps-{{ .Environment.CACHE_VERSION }}

jobs:

  # 1. Download and cache node and composer dependencies.
  # 2. Build deployable plugin folder.
  # 3. Persist project folder to workspace for other jobs.
  build:
    docker:
      - image: cimg/php:7.3-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - disable_xdebug_php_extension
      - set_proper_node_version
      - install_yarn_dependencies
      - install_rsync
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - install_wpcli
      - run:
          name: Build the Go theme
          command: |
            yarn build
            mkdir -p go
            rsync -av --exclude-from ~/project/.distignore --delete ~/project/. ./go
            rm -rf go/languages
      - run:
          name: Zip the Go Theme
          command: |
            mkdir -p /tmp/artifacts
            if [ "$CIRCLE_BRANCH" == 'master' ] || [ ! -z "$CIRCLE_TAG" ]; then
              zip -r /tmp/artifacts/go.zip ./go
            else
              GO_VERSION_LINE=$(awk '/\* Version:/' ./go/style.css)
              VER_NUMBER=$(echo "$GO_VERSION_LINE" | tr -dc '0-9.')
              GO_COMMIT_HASH=$(git rev-parse --verify HEAD | head -c 7)
              sed -i -e "s/${VER_NUMBER}/${VER_NUMBER}-${CIRCLE_PULL_REQUEST##*/}+${GO_COMMIT_HASH}/g" ./go/style.css
              zip -r "/tmp/artifacts/go-${CIRCLE_PULL_REQUEST##*/}.zip" ./go
            fi
      - run:
          name: Store the build number
          command: |
            echo ${CIRCLE_BUILD_NUM} > ~/project/build-num.txt
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: ~/project
          paths:
            - go
            - build-num.txt

  pr_artifact_comment:
    docker:
      - image: cimg/php:7.3-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Send Comment
          command: bash .dev/bin/comment-on-pr.sh

  php56-phpcs:
    executor: php_56
    steps:
      - run_php_cs

  php74-phpcs:
    executor: php_74
    steps:
      - run_php_cs

  php80-phpcs:
    executor: php_80
    steps:
      - run_php_cs

  unit-tests:
    executor: php_74_apache_node_browsers_mysql
    steps:
      - run_php_unit_test

  theme-check:
    executor: php_74_apache_node_browsers_mysql
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - wait_for_mysql
      - run:
          name: Install MariaDB
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get install mariadb-client
      - install_wpcli
      - run:
          name: Setup WordPress site and install the Theme Check package
          command: bash .dev/deploy-scripts/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
      - run:
          name: Run theme check
          command: wp themecheck --theme=go --no-interactive --path=/var/www/html/wordpress

  customizer-e2e:
    executor: php_74_apache_node_browsers_mysql
    steps:
      - run:
          name: Update hosts
          command: echo 127.0.0.1 go.test | sudo tee -a /etc/hosts
      - checkout
      - attach_workspace:
          at: ~/project
      - wait_for_mysql
      - install_wpcli
      - run:
          name: Install MariaDB
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get install mariadb-client
      - run:
          name: Setup WordPress site
          command: bash .dev/deploy-scripts/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
      - restore_composer_cache
      - run:
          name: Install Composer packages
          command: composer install
          working_directory: /var/www/html/wordpress/wp-content/themes/go
      - add_ssh_keys:
          fingerprints:
            - "7e:67:b2:b7:ac:45:85:15:5d:e2:16:11:f5:00:8f:2b"
      - install_yarn_dependencies
      - run:
          name: Install WPNUX Template Switcher
          command: |
            cd /var/www/html/wordpress/wp-content/plugins
            git clone git@github.com:godaddy-wordpress/wpnux-template-switcher.git wpnux-template-loader
            wp plugin activate wpnux-template-loader
      - add_ssh_keys:
          fingerprints:
            - "3c:e9:ef:51:a5:2f:f4:b6:cd:ee:ba:88:33:a2:83:00"
      - run:
          name:  Install WPCLI NUX Importer
          command: |
            mkdir -p ~/.wp-cli/packages/local
            cd ~/.wp-cli/packages/local
            git clone git@github.com:godaddy-wordpress/wp-cli-nux-command.git
            cp wp-cli-nux-command/bin/config.yml ~/.wp-cli/config.yml
      - run:
          name:  Flush permalinks and generate .htaccess file
          command: wp rewrite flush --hard --path=/var/www/html/wordpress
      - run:
          name: Fix permissions on uploads directory for WPNUX importer
          command: sudo chown -R www-data:www-data /var/www/html/wordpress/wp-content/uploads
      - run:
          name: Activate CoBlocks and WooCommerce
          command: |
            wp plugin activate coblocks --path=/var/www/html/wordpress
            wp plugin activate woocommerce --path=/var/www/html/wordpress
      - run:
          name: Setup the Keynote template
          command: wp nux import keynote --path=/var/www/html/wordpress --content-only
      - run:
          name: "Run end to end Customizer tests (Cypress.io) - chrome"
          command: ./node_modules/.bin/cypress run --browser chrome --parallel --record --spec .dev/tests/cypress/integration/customizer/*.js

  a11y-tests:
    executor: php_74_apache_node_browsers_mysql
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - wait_for_mysql
      - run:
          name: Update hosts
          command: echo 127.0.0.1 go.test | sudo tee -a /etc/hosts
      - run:
          name: Install MariaDB
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get install mariadb-client
      - install_yarn_dependencies
      - install_wpcli
      - run:
          name: Setup WordPress site
          command: bash .dev/deploy-scripts/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
      - run:
          name: Run a11y tests
          command: |
            RESULTS=$(yarn test:a11y)
            echo "$RESULTS"
            if [[ $RESULTS != *"All accessibility tests have passed"* ]]; then
              exit 1
            fi

  i18n:
    executor: php_74_browsers
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7b:54:70:0e:66:62:21:d3:29:1e:49:f7:3f:13:f4:b9"
      - checkout
      - run:
          name: Check the commit for [skip i18n]
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
            if [[ $GIT_COMMIT_DESC == *"skip i18n"* ]]; then
              circleci-agent step halt
            fi
      - disable_xdebug_php_extension
      - install_wpcli
      - install_yarn_dependencies
      - run:
          name: Generate the translations
          command: yarn makepot
      - run:
          name: Deploy go.pot/go.json back to GitHub
          command: |
            git config --global user.email "plugins@godaddy.com"
            git config --global user.name "GoDaddy Translator Bot"
            git checkout HEAD -- composer.lock
            git checkout HEAD -- yarn.lock
            git add languages/go.json
            git add languages/go.pot
            git status
            git commit -m "Update go.pot/go.json files [skip i18n]"
            git reset --hard
            git pull --rebase
            git push origin master --quiet

  visual-regression-chrome:
    executor: php_74_apache_node_browsers_mysql
    parallelism: 30
    steps:
      - run_visual_regression_tests:
          browser: chrome

  visual-regression-firefox:
    executor: php_74_apache_node_browsers_mysql
    parallelism: 30
    steps:
      - run_visual_regression_tests:
          browser: firefox

  visual-regression-update-snapshots-chrome:
    executor: python_310_browsers
    parallelism: 30
    steps:
      - visual-regression-update-snapshots:
          browser: chrome

  visual-regression-update-snapshots-firefox:
    executor: python_310_browsers
    parallelism: 30
    steps:
      - visual-regression-update-snapshots:
          browser: firefox

  canary:
    executor: go_1_17_browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - install_yarn_dependencies
      - run:
          name: Install ghr
          command: go get -u github.com/tcnksm/ghr
      - run:
          name: Install PHP
          command: sudo apt update && sudo apt -y install php7.4
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - run:
          name: Zip the Go Theme
          command: |
            mkdir -p /tmp/artifacts
            yarn json2po
            yarn po2mo
            GO_VERSION_LINE=$(awk '/\* Version:/' ./go/style.css)
            VER_NUMBER=$(echo "$GO_VERSION_LINE" | tr -dc '0-9.')
            GO_COMMIT_HASH=$(git rev-parse --verify HEAD | head -c 7)
            sed -i -e "s/${VER_NUMBER}/${VER_NUMBER}-canary+${GO_COMMIT_HASH}/g" ./go/style.css
            zip -r /tmp/artifacts/go-canary.zip ./go
      - run:
          name: Create a canary release on GitHub
          command: ghr -t ${GH_AUTH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "canary" -b "Latest build of the master branch. This bleeding edge version is for testing purposes only and should not be used in production." -delete -prerelease -replace canary /tmp/artifacts/go-canary.zip
      - store_artifacts:
          path: /tmp/artifacts

  deploy:
    executor: go_1_17_browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install PHP
          command: sudo apt update && sudo apt-get install php libapache2-mod-php php-mbstring
      - install_wpcli
      - run:
          name: Install ghr
          command: |
            go get -u github.com/tcnksm/ghr
      - run:
          name: Zip the Go Theme
          command: |
            mkdir -p /tmp/artifacts
            zip -r /tmp/artifacts/go.zip ./go
      - deploy:
          name: Deploy a new release to GitHub
          command: |
            CHANGELOG=$(sed -n -e '/== Changelog ==/,$p' $HOME/project/readme.txt | tail -n +3)
            ghr -t ${GH_AUTH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -b "${CHANGELOG}" -delete ${CIRCLE_TAG} /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts
